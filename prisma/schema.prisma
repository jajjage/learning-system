// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TEACHER
  STUDENT
}
model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  clerkId   String   @unique
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses   Course[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  userId      String
  description String?
  price       Float?
  imageUrl    String?
  isPublished   Boolean  @default(false)
 
  user User @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  attachments Attachment[]
  chapters Chapter[]
  purchases Purchase[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id          String   @id @default(cuid())
  name        String
  url         String?
  size        Int?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String

  @@index([courseId])
}

model Chapter {
  id String @id @default(cuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgess[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([courseId])
}

model MuxData {
  id  String @id @default(cuid())
  assetId String
  playBackId String?

  chapterId String @unique
  chapter  Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgess {
  id String @id @default(cuid())
  userId String

  chapterId String 
  chapter  Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(cuid())
  userId String


  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([courseId])
  @@unique([userId, courseId])
}

model StripeCustomer {
  id String @id @default(cuid())
  userId String
  stripeCutomerId String @unique

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}