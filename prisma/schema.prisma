// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum Role {
  TEACHER
  STUDENT
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  DROPPED
  WAITLISTED
}

enum Level {
  ALL
  BEGINNER
  INTERMEDIATE 
  ADVANCED
  PROFESSIONAL 
}
model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  clerkId   String   @unique
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses   Course[]
  enrollments Enrollment[]
  ratings     Rating[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  userId      String
  description String?
  price       Float?
  imageUrl    String?
  isPublished   Boolean  @default(false)
  maxEnrollment Int?         // Maximum number of students that can enroll
  enrollmentDeadline DateTime? // Optional deadline for enrollment
  startDate     DateTime?    // When the course starts
  endDate       DateTime?    // When the course ends
  isEnrollmentOpen Boolean   @default(true)
  isFree        Boolean  @default(true)
  level      Level  @default(BEGINNER)
  isCertificateOffered    Boolean @default(false)

  averageRating Float?       // Calculated average rating
  totalRatings  Int          @default(0) // Count of total ratings
 
  user User @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  attachments Attachment[]
  chapters Chapter[]
  purchases Purchase[]
  enrollments Enrollment[]
  ratings     Rating[] 
  userChapterAccess UserChapterAccess[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id          String   @id @default(cuid())
  name        String
  url         String?
  size        Int?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String

  @@index([courseId])
}

model Chapter {
  id String @id @default(cuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  duration String?

  muxData MuxData?

  courseId String
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  userChapterAccess UserChapterAccess[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([courseId])
}


model UserChapterAccess {
  id        String   @id @default(cuid())
  userId    String
  chapterId String
  courseId  String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, chapterId])
  @@index([userId])
  @@index([courseId])
}
model MuxData {
  id  String @id @default(cuid())
  assetId String
  playBackId String?

  chapterId String @unique
  chapter  Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(cuid())
  userId String
  duration   Int       @default(0) // Duration in seconds spent on this chapter
  progress   Float?    // Percentage of progress (e.g., 50.0 for 50%)
  startedAt  DateTime? // When the user started this chapter
  completedAt DateTime? // When the user completed this chapter

  chapterId String 
  chapter  Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(cuid())
  userId String


  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([courseId])
  @@unique([userId, courseId])
}

model StripeCustomer {
  id String @id @default(cuid())
  userId String
  stripeCutomerId String @unique

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Enrollment {
  id           String           @id @default(cuid())
  status       EnrollmentStatus @default(PENDING)
  enrolledAt   DateTime         @default(now())
  completedAt  DateTime?
  grade        Float?           // Optional final grade
  lastAccessed DateTime?        // Last time student accessed the course
  notes        String?          // Administrative notes about the enrollment

  // Relations
  user         User             @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId       String
  course       Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([userId, courseId]) // Prevent duplicate enrollments
  @@index([userId])
  @@index([courseId])
}

model Rating {
  id          String    @id @default(cuid())
  rating      Int       @db.SmallInt // Rating score (e.g., 1-5)
  comment     String?   @db.Text     // Optional review text
  isPublished Boolean   @default(true)
  
  // Reply from the course creator
  instructorReply String? @db.Text
  repliedAt      DateTime?

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String

  // Helpful votes from other users
  helpfulCount Int     @default(0)
  
  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Ensure user can only rate a course once
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  
  // Constraint to ensure rating is between 1 and 5
 
}

model HelpfulVote {
  id        String   @id @default(cuid())
  userId    String
  ratingId  String
  createdAt DateTime @default(now())

  @@unique([userId, ratingId])
  @@index([ratingId])
}